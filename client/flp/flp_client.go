// Code generated by go-swagger; DO NOT EDIT.

package flp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new flp API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for flp API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetFlpNameRunsID returns a specific f l p based on run Id
*/
func (a *Client) GetFlpNameRunsID(params *GetFlpNameRunsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFlpNameRunsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlpNameRunsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFlpNameRunsID",
		Method:             "GET",
		PathPattern:        "/flp/{name}/runs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFlpNameRunsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlpNameRunsIDOK), nil

}

/*
PatchFlpNameRunsID updates an f l p based on a run Id and f l p name
*/
func (a *Client) PatchFlpNameRunsID(params *PatchFlpNameRunsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchFlpNameRunsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFlpNameRunsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchFlpNameRunsID",
		Method:             "PATCH",
		PathPattern:        "/flp/{name}/runs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchFlpNameRunsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchFlpNameRunsIDOK), nil

}

/*
PostFlp creates an f l p
*/
func (a *Client) PostFlp(params *PostFlpParams, authInfo runtime.ClientAuthInfoWriter) (*PostFlpCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFlpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFlp",
		Method:             "POST",
		PathPattern:        "/flp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostFlpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFlpCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
