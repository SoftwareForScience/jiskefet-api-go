// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PostTagsReader is a Reader for the PostTags structure.
type PostTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostTagsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewPostTagsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostTagsCreated creates a PostTagsCreated with default headers values
func NewPostTagsCreated() *PostTagsCreated {
	return &PostTagsCreated{}
}

/*PostTagsCreated handles this case with default header values.

Succesfully created a Tag
*/
type PostTagsCreated struct {
	Payload interface{}
}

func (o *PostTagsCreated) Error() string {
	return fmt.Sprintf("[POST /tags][%d] postTagsCreated  %+v", 201, o.Payload)
}

func (o *PostTagsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTagsConflict creates a PostTagsConflict with default headers values
func NewPostTagsConflict() *PostTagsConflict {
	return &PostTagsConflict{}
}

/*PostTagsConflict handles this case with default header values.

A Log already exists with this ID.
*/
type PostTagsConflict struct {
}

func (o *PostTagsConflict) Error() string {
	return fmt.Sprintf("[POST /tags][%d] postTagsConflict ", 409)
}

func (o *PostTagsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
