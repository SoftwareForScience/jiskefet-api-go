// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUsersIDLogsParams creates a new GetUsersIDLogsParams object
// with the default values initialized.
func NewGetUsersIDLogsParams() *GetUsersIDLogsParams {
	var (
		pageNumberDefault = string("1")
		pageSizeDefault   = string("25")
	)
	return &GetUsersIDLogsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsersIDLogsParamsWithTimeout creates a new GetUsersIDLogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUsersIDLogsParamsWithTimeout(timeout time.Duration) *GetUsersIDLogsParams {
	var (
		pageNumberDefault = string("1")
		pageSizeDefault   = string("25")
	)
	return &GetUsersIDLogsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetUsersIDLogsParamsWithContext creates a new GetUsersIDLogsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUsersIDLogsParamsWithContext(ctx context.Context) *GetUsersIDLogsParams {
	var (
		pageNumberDefault = string("1")
		pageSizeDefault   = string("25")
	)
	return &GetUsersIDLogsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetUsersIDLogsParamsWithHTTPClient creates a new GetUsersIDLogsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUsersIDLogsParamsWithHTTPClient(client *http.Client) *GetUsersIDLogsParams {
	var (
		pageNumberDefault = string("1")
		pageSizeDefault   = string("25")
	)
	return &GetUsersIDLogsParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetUsersIDLogsParams contains all the parameters to send to the API endpoint
for the get users ID logs operation typically these are written to a http.Request
*/
type GetUsersIDLogsParams struct {

	/*EndCreationTime
	  The upper bound of the creation time filter range.

	*/
	EndCreationTime *string
	/*ID*/
	ID int64
	/*LogID
	  The id of the log.

	*/
	LogID *string
	/*OrderBy
	  On which field to order on.

	*/
	OrderBy *string
	/*OrderDirection
	  The order direction, either ascending or descending.

	*/
	OrderDirection *string
	/*Origin
	  The origin/creator of the log.

	*/
	Origin *string
	/*PageNumber
	  The current page, i.e. the offset in the result set based on pageSize.

	*/
	PageNumber *string
	/*PageSize
	  The maximum amount of logs in each result.

	*/
	PageSize *string
	/*Searchterm
	  Search for a term that exists in the title field of a log.

	*/
	Searchterm *string
	/*StartCreationTime
	  The lower bound of the creation time filter range.

	*/
	StartCreationTime *string
	/*Subtype
	  The subtype of the log.

	*/
	Subtype *string
	/*User
	  The author of the log..

	*/
	User *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get users ID logs params
func (o *GetUsersIDLogsParams) WithTimeout(timeout time.Duration) *GetUsersIDLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get users ID logs params
func (o *GetUsersIDLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get users ID logs params
func (o *GetUsersIDLogsParams) WithContext(ctx context.Context) *GetUsersIDLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get users ID logs params
func (o *GetUsersIDLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get users ID logs params
func (o *GetUsersIDLogsParams) WithHTTPClient(client *http.Client) *GetUsersIDLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get users ID logs params
func (o *GetUsersIDLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndCreationTime adds the endCreationTime to the get users ID logs params
func (o *GetUsersIDLogsParams) WithEndCreationTime(endCreationTime *string) *GetUsersIDLogsParams {
	o.SetEndCreationTime(endCreationTime)
	return o
}

// SetEndCreationTime adds the endCreationTime to the get users ID logs params
func (o *GetUsersIDLogsParams) SetEndCreationTime(endCreationTime *string) {
	o.EndCreationTime = endCreationTime
}

// WithID adds the id to the get users ID logs params
func (o *GetUsersIDLogsParams) WithID(id int64) *GetUsersIDLogsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get users ID logs params
func (o *GetUsersIDLogsParams) SetID(id int64) {
	o.ID = id
}

// WithLogID adds the logID to the get users ID logs params
func (o *GetUsersIDLogsParams) WithLogID(logID *string) *GetUsersIDLogsParams {
	o.SetLogID(logID)
	return o
}

// SetLogID adds the logId to the get users ID logs params
func (o *GetUsersIDLogsParams) SetLogID(logID *string) {
	o.LogID = logID
}

// WithOrderBy adds the orderBy to the get users ID logs params
func (o *GetUsersIDLogsParams) WithOrderBy(orderBy *string) *GetUsersIDLogsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get users ID logs params
func (o *GetUsersIDLogsParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithOrderDirection adds the orderDirection to the get users ID logs params
func (o *GetUsersIDLogsParams) WithOrderDirection(orderDirection *string) *GetUsersIDLogsParams {
	o.SetOrderDirection(orderDirection)
	return o
}

// SetOrderDirection adds the orderDirection to the get users ID logs params
func (o *GetUsersIDLogsParams) SetOrderDirection(orderDirection *string) {
	o.OrderDirection = orderDirection
}

// WithOrigin adds the origin to the get users ID logs params
func (o *GetUsersIDLogsParams) WithOrigin(origin *string) *GetUsersIDLogsParams {
	o.SetOrigin(origin)
	return o
}

// SetOrigin adds the origin to the get users ID logs params
func (o *GetUsersIDLogsParams) SetOrigin(origin *string) {
	o.Origin = origin
}

// WithPageNumber adds the pageNumber to the get users ID logs params
func (o *GetUsersIDLogsParams) WithPageNumber(pageNumber *string) *GetUsersIDLogsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get users ID logs params
func (o *GetUsersIDLogsParams) SetPageNumber(pageNumber *string) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get users ID logs params
func (o *GetUsersIDLogsParams) WithPageSize(pageSize *string) *GetUsersIDLogsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get users ID logs params
func (o *GetUsersIDLogsParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithSearchterm adds the searchterm to the get users ID logs params
func (o *GetUsersIDLogsParams) WithSearchterm(searchterm *string) *GetUsersIDLogsParams {
	o.SetSearchterm(searchterm)
	return o
}

// SetSearchterm adds the searchterm to the get users ID logs params
func (o *GetUsersIDLogsParams) SetSearchterm(searchterm *string) {
	o.Searchterm = searchterm
}

// WithStartCreationTime adds the startCreationTime to the get users ID logs params
func (o *GetUsersIDLogsParams) WithStartCreationTime(startCreationTime *string) *GetUsersIDLogsParams {
	o.SetStartCreationTime(startCreationTime)
	return o
}

// SetStartCreationTime adds the startCreationTime to the get users ID logs params
func (o *GetUsersIDLogsParams) SetStartCreationTime(startCreationTime *string) {
	o.StartCreationTime = startCreationTime
}

// WithSubtype adds the subtype to the get users ID logs params
func (o *GetUsersIDLogsParams) WithSubtype(subtype *string) *GetUsersIDLogsParams {
	o.SetSubtype(subtype)
	return o
}

// SetSubtype adds the subtype to the get users ID logs params
func (o *GetUsersIDLogsParams) SetSubtype(subtype *string) {
	o.Subtype = subtype
}

// WithUser adds the user to the get users ID logs params
func (o *GetUsersIDLogsParams) WithUser(user *string) *GetUsersIDLogsParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the get users ID logs params
func (o *GetUsersIDLogsParams) SetUser(user *string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsersIDLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndCreationTime != nil {

		// query param endCreationTime
		var qrEndCreationTime string
		if o.EndCreationTime != nil {
			qrEndCreationTime = *o.EndCreationTime
		}
		qEndCreationTime := qrEndCreationTime
		if qEndCreationTime != "" {
			if err := r.SetQueryParam("endCreationTime", qEndCreationTime); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.LogID != nil {

		// query param logId
		var qrLogID string
		if o.LogID != nil {
			qrLogID = *o.LogID
		}
		qLogID := qrLogID
		if qLogID != "" {
			if err := r.SetQueryParam("logId", qLogID); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param orderBy
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("orderBy", qOrderBy); err != nil {
				return err
			}
		}

	}

	if o.OrderDirection != nil {

		// query param orderDirection
		var qrOrderDirection string
		if o.OrderDirection != nil {
			qrOrderDirection = *o.OrderDirection
		}
		qOrderDirection := qrOrderDirection
		if qOrderDirection != "" {
			if err := r.SetQueryParam("orderDirection", qOrderDirection); err != nil {
				return err
			}
		}

	}

	if o.Origin != nil {

		// query param origin
		var qrOrigin string
		if o.Origin != nil {
			qrOrigin = *o.Origin
		}
		qOrigin := qrOrigin
		if qOrigin != "" {
			if err := r.SetQueryParam("origin", qOrigin); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Searchterm != nil {

		// query param searchterm
		var qrSearchterm string
		if o.Searchterm != nil {
			qrSearchterm = *o.Searchterm
		}
		qSearchterm := qrSearchterm
		if qSearchterm != "" {
			if err := r.SetQueryParam("searchterm", qSearchterm); err != nil {
				return err
			}
		}

	}

	if o.StartCreationTime != nil {

		// query param startCreationTime
		var qrStartCreationTime string
		if o.StartCreationTime != nil {
			qrStartCreationTime = *o.StartCreationTime
		}
		qStartCreationTime := qrStartCreationTime
		if qStartCreationTime != "" {
			if err := r.SetQueryParam("startCreationTime", qStartCreationTime); err != nil {
				return err
			}
		}

	}

	if o.Subtype != nil {

		// query param subtype
		var qrSubtype string
		if o.Subtype != nil {
			qrSubtype = *o.Subtype
		}
		qSubtype := qrSubtype
		if qSubtype != "" {
			if err := r.SetQueryParam("subtype", qSubtype); err != nil {
				return err
			}
		}

	}

	if o.User != nil {

		// query param user
		var qrUser string
		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {
			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
