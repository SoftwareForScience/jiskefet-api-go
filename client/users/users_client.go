// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetUsersID get users ID API
*/
func (a *Client) GetUsersID(params *GetUsersIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersID",
		Method:             "GET",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersIDOK), nil

}

/*
GetUsersIDLogs get users ID logs API
*/
func (a *Client) GetUsersIDLogs(params *GetUsersIDLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersIDLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersIDLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersIDLogs",
		Method:             "GET",
		PathPattern:        "/users/{id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersIDLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersIDLogsOK), nil

}

/*
GetUsersIDTokens get users ID tokens API
*/
func (a *Client) GetUsersIDTokens(params *GetUsersIDTokensParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersIDTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersIDTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersIDTokens",
		Method:             "GET",
		PathPattern:        "/users/{id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersIDTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersIDTokensOK), nil

}

/*
PostUsersIDTokens post users ID tokens API
*/
func (a *Client) PostUsersIDTokens(params *PostUsersIDTokensParams, authInfo runtime.ClientAuthInfoWriter) (*PostUsersIDTokensCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersIDTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersIDTokens",
		Method:             "POST",
		PathPattern:        "/users/{id}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUsersIDTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersIDTokensCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
