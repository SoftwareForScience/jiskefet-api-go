// Code generated by go-swagger; DO NOT EDIT.

package runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SoftwareForScience/jiskefet-api-go/models"
)

// PostRunsReader is a Reader for the PostRuns structure.
type PostRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostRunsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewPostRunsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostRunsCreated creates a PostRunsCreated with default headers values
func NewPostRunsCreated() *PostRunsCreated {
	return &PostRunsCreated{}
}

/*PostRunsCreated handles this case with default header values.

Succesfully created a Run.
*/
type PostRunsCreated struct {
	Payload *models.Run
}

func (o *PostRunsCreated) Error() string {
	return fmt.Sprintf("[POST /runs][%d] postRunsCreated  %+v", 201, o.Payload)
}

func (o *PostRunsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Run)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRunsConflict creates a PostRunsConflict with default headers values
func NewPostRunsConflict() *PostRunsConflict {
	return &PostRunsConflict{}
}

/*PostRunsConflict handles this case with default header values.

A Run already exists with given Run number.
*/
type PostRunsConflict struct {
}

func (o *PostRunsConflict) Error() string {
	return fmt.Sprintf("[POST /runs][%d] postRunsConflict ", 409)
}

func (o *PostRunsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
