// Code generated by go-swagger; DO NOT EDIT.

package runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SoftwareForScience/jiskefet-api-go/models"
)

// NewPatchRunsIDLogsParams creates a new PatchRunsIDLogsParams object
// with the default values initialized.
func NewPatchRunsIDLogsParams() *PatchRunsIDLogsParams {
	var ()
	return &PatchRunsIDLogsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchRunsIDLogsParamsWithTimeout creates a new PatchRunsIDLogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchRunsIDLogsParamsWithTimeout(timeout time.Duration) *PatchRunsIDLogsParams {
	var ()
	return &PatchRunsIDLogsParams{

		timeout: timeout,
	}
}

// NewPatchRunsIDLogsParamsWithContext creates a new PatchRunsIDLogsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchRunsIDLogsParamsWithContext(ctx context.Context) *PatchRunsIDLogsParams {
	var ()
	return &PatchRunsIDLogsParams{

		Context: ctx,
	}
}

// NewPatchRunsIDLogsParamsWithHTTPClient creates a new PatchRunsIDLogsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchRunsIDLogsParamsWithHTTPClient(client *http.Client) *PatchRunsIDLogsParams {
	var ()
	return &PatchRunsIDLogsParams{
		HTTPClient: client,
	}
}

/*PatchRunsIDLogsParams contains all the parameters to send to the API endpoint
for the patch runs ID logs operation typically these are written to a http.Request
*/
type PatchRunsIDLogsParams struct {

	/*LinkLogToRunDto*/
	LinkLogToRunDto *models.LinkLogToRunDto
	/*ID*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) WithTimeout(timeout time.Duration) *PatchRunsIDLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) WithContext(ctx context.Context) *PatchRunsIDLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) WithHTTPClient(client *http.Client) *PatchRunsIDLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLinkLogToRunDto adds the linkLogToRunDto to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) WithLinkLogToRunDto(linkLogToRunDto *models.LinkLogToRunDto) *PatchRunsIDLogsParams {
	o.SetLinkLogToRunDto(linkLogToRunDto)
	return o
}

// SetLinkLogToRunDto adds the linkLogToRunDto to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) SetLinkLogToRunDto(linkLogToRunDto *models.LinkLogToRunDto) {
	o.LinkLogToRunDto = linkLogToRunDto
}

// WithID adds the id to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) WithID(id int64) *PatchRunsIDLogsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch runs ID logs params
func (o *PatchRunsIDLogsParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *PatchRunsIDLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LinkLogToRunDto != nil {
		if err := r.SetBodyParam(o.LinkLogToRunDto); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
