// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SoftwareForScience/jiskefet-api-go/models"
)

// NewPatchLogsIDRunsParams creates a new PatchLogsIDRunsParams object
// with the default values initialized.
func NewPatchLogsIDRunsParams() *PatchLogsIDRunsParams {
	var ()
	return &PatchLogsIDRunsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchLogsIDRunsParamsWithTimeout creates a new PatchLogsIDRunsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchLogsIDRunsParamsWithTimeout(timeout time.Duration) *PatchLogsIDRunsParams {
	var ()
	return &PatchLogsIDRunsParams{

		timeout: timeout,
	}
}

// NewPatchLogsIDRunsParamsWithContext creates a new PatchLogsIDRunsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchLogsIDRunsParamsWithContext(ctx context.Context) *PatchLogsIDRunsParams {
	var ()
	return &PatchLogsIDRunsParams{

		Context: ctx,
	}
}

// NewPatchLogsIDRunsParamsWithHTTPClient creates a new PatchLogsIDRunsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchLogsIDRunsParamsWithHTTPClient(client *http.Client) *PatchLogsIDRunsParams {
	var ()
	return &PatchLogsIDRunsParams{
		HTTPClient: client,
	}
}

/*PatchLogsIDRunsParams contains all the parameters to send to the API endpoint
for the patch logs ID runs operation typically these are written to a http.Request
*/
type PatchLogsIDRunsParams struct {

	/*LinkRunToLogDto*/
	LinkRunToLogDto *models.LinkRunToLogDto
	/*ID*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) WithTimeout(timeout time.Duration) *PatchLogsIDRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) WithContext(ctx context.Context) *PatchLogsIDRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) WithHTTPClient(client *http.Client) *PatchLogsIDRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLinkRunToLogDto adds the linkRunToLogDto to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) WithLinkRunToLogDto(linkRunToLogDto *models.LinkRunToLogDto) *PatchLogsIDRunsParams {
	o.SetLinkRunToLogDto(linkRunToLogDto)
	return o
}

// SetLinkRunToLogDto adds the linkRunToLogDto to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) SetLinkRunToLogDto(linkRunToLogDto *models.LinkRunToLogDto) {
	o.LinkRunToLogDto = linkRunToLogDto
}

// WithID adds the id to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) WithID(id int64) *PatchLogsIDRunsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch logs ID runs params
func (o *PatchLogsIDRunsParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *PatchLogsIDRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LinkRunToLogDto != nil {
		if err := r.SetBodyParam(o.LinkRunToLogDto); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
