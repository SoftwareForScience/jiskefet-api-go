// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/SoftwareForScience/jiskefet-api-go/models"
)

// PostLogsReader is a Reader for the PostLogs structure.
type PostLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostLogsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewPostLogsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostLogsCreated creates a PostLogsCreated with default headers values
func NewPostLogsCreated() *PostLogsCreated {
	return &PostLogsCreated{}
}

/*PostLogsCreated handles this case with default header values.

Succesfully created a Log
*/
type PostLogsCreated struct {
	Payload *models.Log
}

func (o *PostLogsCreated) Error() string {
	return fmt.Sprintf("[POST /logs][%d] postLogsCreated  %+v", 201, o.Payload)
}

func (o *PostLogsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Log)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLogsConflict creates a PostLogsConflict with default headers values
func NewPostLogsConflict() *PostLogsConflict {
	return &PostLogsConflict{}
}

/*PostLogsConflict handles this case with default header values.

A Log already exists with this ID.
*/
type PostLogsConflict struct {
}

func (o *PostLogsConflict) Error() string {
	return fmt.Sprintf("[POST /logs][%d] postLogsConflict ", 409)
}

func (o *PostLogsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
