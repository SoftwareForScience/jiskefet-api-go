// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PatchLogsIDRunsReader is a Reader for the PatchLogsIDRuns structure.
type PatchLogsIDRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLogsIDRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPatchLogsIDRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewPatchLogsIDRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchLogsIDRunsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchLogsIDRunsNoContent creates a PatchLogsIDRunsNoContent with default headers values
func NewPatchLogsIDRunsNoContent() *PatchLogsIDRunsNoContent {
	return &PatchLogsIDRunsNoContent{}
}

/*PatchLogsIDRunsNoContent handles this case with default header values.

Succesfully linked a Run to a Log.
*/
type PatchLogsIDRunsNoContent struct {
}

func (o *PatchLogsIDRunsNoContent) Error() string {
	return fmt.Sprintf("[PATCH /logs/{id}/runs][%d] patchLogsIdRunsNoContent ", 204)
}

func (o *PatchLogsIDRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchLogsIDRunsNotFound creates a PatchLogsIDRunsNotFound with default headers values
func NewPatchLogsIDRunsNotFound() *PatchLogsIDRunsNotFound {
	return &PatchLogsIDRunsNotFound{}
}

/*PatchLogsIDRunsNotFound handles this case with default header values.

The Run or Log does not exist.
*/
type PatchLogsIDRunsNotFound struct {
}

func (o *PatchLogsIDRunsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /logs/{id}/runs][%d] patchLogsIdRunsNotFound ", 404)
}

func (o *PatchLogsIDRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchLogsIDRunsConflict creates a PatchLogsIDRunsConflict with default headers values
func NewPatchLogsIDRunsConflict() *PatchLogsIDRunsConflict {
	return &PatchLogsIDRunsConflict{}
}

/*PatchLogsIDRunsConflict handles this case with default header values.

The Run is already linked to the Log.
*/
type PatchLogsIDRunsConflict struct {
}

func (o *PatchLogsIDRunsConflict) Error() string {
	return fmt.Sprintf("[PATCH /logs/{id}/runs][%d] patchLogsIdRunsConflict ", 409)
}

func (o *PatchLogsIDRunsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
