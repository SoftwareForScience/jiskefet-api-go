// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlpRole flp role
// swagger:model FlpRole
type FlpRole struct {

	// equipment bytes
	// Required: true
	EquipmentBytes *int64 `json:"equipmentBytes"`

	// fair m q bytes
	// Required: true
	FairMQBytes *int64 `json:"fairMQBytes"`

	// n sub timeframes
	// Required: true
	NSubTimeframes *int64 `json:"nSubTimeframes"`

	// recording bytes
	// Required: true
	RecordingBytes *int64 `json:"recordingBytes"`

	// run
	// Required: true
	Run *int64 `json:"run"`
}

// Validate validates this flp role
func (m *FlpRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEquipmentBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFairMQBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSubTimeframes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordingBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlpRole) validateEquipmentBytes(formats strfmt.Registry) error {

	if err := validate.Required("equipmentBytes", "body", m.EquipmentBytes); err != nil {
		return err
	}

	return nil
}

func (m *FlpRole) validateFairMQBytes(formats strfmt.Registry) error {

	if err := validate.Required("fairMQBytes", "body", m.FairMQBytes); err != nil {
		return err
	}

	return nil
}

func (m *FlpRole) validateNSubTimeframes(formats strfmt.Registry) error {

	if err := validate.Required("nSubTimeframes", "body", m.NSubTimeframes); err != nil {
		return err
	}

	return nil
}

func (m *FlpRole) validateRecordingBytes(formats strfmt.Registry) error {

	if err := validate.Required("recordingBytes", "body", m.RecordingBytes); err != nil {
		return err
	}

	return nil
}

func (m *FlpRole) validateRun(formats strfmt.Registry) error {

	if err := validate.Required("run", "body", m.Run); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlpRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlpRole) UnmarshalBinary(b []byte) error {
	var res FlpRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
