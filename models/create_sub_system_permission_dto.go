// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSubSystemPermissionDto create sub system permission dto
// swagger:model CreateSubSystemPermissionDto
type CreateSubSystemPermissionDto struct {

	// Reason for the end of run.
	// Required: true
	EditEorReason *bool `json:"editEorReason"`

	// If the user is a member.
	// Required: true
	IsMember *bool `json:"isMember"`

	// A unique token for a subsystem linked to a user.
	// Required: true
	SubSystemHash *string `json:"subSystemHash"`

	// A description for the subsystem.
	// Required: true
	SubSystemTokenDescription *string `json:"subSystemTokenDescription"`

	// SubSystem
	// Required: true
	Subsystem *SubSystem `json:"subsystem"`

	// user
	// Required: true
	User *int64 `json:"user"`
}

// Validate validates this create sub system permission dto
func (m *CreateSubSystemPermissionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEditEorReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubSystemHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubSystemTokenDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubsystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSubSystemPermissionDto) validateEditEorReason(formats strfmt.Registry) error {

	if err := validate.Required("editEorReason", "body", m.EditEorReason); err != nil {
		return err
	}

	return nil
}

func (m *CreateSubSystemPermissionDto) validateIsMember(formats strfmt.Registry) error {

	if err := validate.Required("isMember", "body", m.IsMember); err != nil {
		return err
	}

	return nil
}

func (m *CreateSubSystemPermissionDto) validateSubSystemHash(formats strfmt.Registry) error {

	if err := validate.Required("subSystemHash", "body", m.SubSystemHash); err != nil {
		return err
	}

	return nil
}

func (m *CreateSubSystemPermissionDto) validateSubSystemTokenDescription(formats strfmt.Registry) error {

	if err := validate.Required("subSystemTokenDescription", "body", m.SubSystemTokenDescription); err != nil {
		return err
	}

	return nil
}

func (m *CreateSubSystemPermissionDto) validateSubsystem(formats strfmt.Registry) error {

	if err := validate.Required("subsystem", "body", m.Subsystem); err != nil {
		return err
	}

	if m.Subsystem != nil {
		if err := m.Subsystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subsystem")
			}
			return err
		}
	}

	return nil
}

func (m *CreateSubSystemPermissionDto) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSubSystemPermissionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSubSystemPermissionDto) UnmarshalBinary(b []byte) error {
	var res CreateSubSystemPermissionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
