// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Log log
// swagger:model Log
type Log struct {

	// announcement valid until
	// Format: date-time
	AnnouncementValidUntil strfmt.DateTime `json:"announcementValidUntil,omitempty"`

	// attachments
	Attachments []*Attachment `json:"attachments"`

	// body
	// Required: true
	Body *string `json:"body"`

	// comment fk parent log Id
	CommentFkParentLogID int64 `json:"commentFkParentLogId,omitempty"`

	// comment fk root log Id
	CommentFkRootLogID int64 `json:"commentFkRootLogId,omitempty"`

	// creation time
	// Required: true
	// Format: date-time
	CreationTime *strfmt.DateTime `json:"creationTime"`

	// log Id
	// Required: true
	LogID *int64 `json:"logId"`

	// origin
	// Required: true
	Origin *string `json:"origin"`

	// runs
	// Required: true
	Runs *int64 `json:"runs"`

	// subsystem fk subsystem Id
	SubsystemFkSubsystemID int64 `json:"subsystemFkSubsystemId,omitempty"`

	// tags
	// Required: true
	Tags []*Tag `json:"tags"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this log
func (m *Log) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnouncementValidUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Log) validateAnnouncementValidUntil(formats strfmt.Registry) error {

	if swag.IsZero(m.AnnouncementValidUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("announcementValidUntil", "body", "date-time", m.AnnouncementValidUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments); i++ {
		if swag.IsZero(m.Attachments[i]) { // not required
			continue
		}

		if m.Attachments[i] != nil {
			if err := m.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Log) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateCreationTime(formats strfmt.Registry) error {

	if err := validate.Required("creationTime", "body", m.CreationTime); err != nil {
		return err
	}

	if err := validate.FormatOf("creationTime", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateLogID(formats strfmt.Registry) error {

	if err := validate.Required("logId", "body", m.LogID); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateOrigin(formats strfmt.Registry) error {

	if err := validate.Required("origin", "body", m.Origin); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateRuns(formats strfmt.Registry) error {

	if err := validate.Required("runs", "body", m.Runs); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Log) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Log) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Log) UnmarshalBinary(b []byte) error {
	var res Log
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
