// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRunDto create run dto
// swagger:model CreateRunDto
type CreateRunDto struct {

	// Current Date
	// Required: true
	// Format: date-time
	O2StartTime *strfmt.DateTime `json:"O2StartTime"`

	// Current Date
	// Required: true
	// Format: date-time
	TrgStartTime *strfmt.DateTime `json:"TrgStartTime"`

	// The id of the activity.
	// Required: true
	ActivityID *string `json:"activityId"`

	// Number of detectors during run.
	// Required: true
	NDetectors *int64 `json:"nDetectors"`

	// Number of EPNs that stored data
	// Required: true
	NEpns *int64 `json:"nEpns"`

	// Number of FLPs that computed data
	// Required: true
	NFlps *int64 `json:"nFlps"`

	// The id of the run
	// Required: true
	RunNumber *int64 `json:"runNumber"`

	// What kind of run.
	// Required: true
	// Enum: [PHYSICS COSMICS TECHNICAL]
	RunType *string `json:"runType"`
}

// Validate validates this create run dto
func (m *CreateRunDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateO2StartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrgStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNDetectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNEpns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNFlps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRunDto) validateO2StartTime(formats strfmt.Registry) error {

	if err := validate.Required("O2StartTime", "body", m.O2StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("O2StartTime", "body", "date-time", m.O2StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateTrgStartTime(formats strfmt.Registry) error {

	if err := validate.Required("TrgStartTime", "body", m.TrgStartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("TrgStartTime", "body", "date-time", m.TrgStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateActivityID(formats strfmt.Registry) error {

	if err := validate.Required("activityId", "body", m.ActivityID); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateNDetectors(formats strfmt.Registry) error {

	if err := validate.Required("nDetectors", "body", m.NDetectors); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateNEpns(formats strfmt.Registry) error {

	if err := validate.Required("nEpns", "body", m.NEpns); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateNFlps(formats strfmt.Registry) error {

	if err := validate.Required("nFlps", "body", m.NFlps); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunDto) validateRunNumber(formats strfmt.Registry) error {

	if err := validate.Required("runNumber", "body", m.RunNumber); err != nil {
		return err
	}

	return nil
}

var createRunDtoTypeRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PHYSICS","COSMICS","TECHNICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRunDtoTypeRunTypePropEnum = append(createRunDtoTypeRunTypePropEnum, v)
	}
}

const (

	// CreateRunDtoRunTypePHYSICS captures enum value "PHYSICS"
	CreateRunDtoRunTypePHYSICS string = "PHYSICS"

	// CreateRunDtoRunTypeCOSMICS captures enum value "COSMICS"
	CreateRunDtoRunTypeCOSMICS string = "COSMICS"

	// CreateRunDtoRunTypeTECHNICAL captures enum value "TECHNICAL"
	CreateRunDtoRunTypeTECHNICAL string = "TECHNICAL"
)

// prop value enum
func (m *CreateRunDto) validateRunTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createRunDtoTypeRunTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateRunDto) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("runType", "body", m.RunType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRunTypeEnum("runType", "body", *m.RunType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateRunDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRunDto) UnmarshalBinary(b []byte) error {
	var res CreateRunDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
