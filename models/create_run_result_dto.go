// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRunResultDto create run result dto
// swagger:model CreateRunResultDto
type CreateRunResultDto struct {

	// The id of the activity.
	// Required: true
	ActivityID *string `json:"activityId"`

	// Amount of bytes read out
	// Required: true
	BytesReadOut *int64 `json:"bytesReadOut"`

	// What builder was used.
	// Required: true
	BytesTimeframeBuilder *int64 `json:"bytesTimeframeBuilder"`

	// Number of detectors during run.
	// Required: true
	NDetectors *int64 `json:"nDetectors"`

	// Number of EPNs that stored data
	// Required: true
	NEpns *int64 `json:"nEpns"`

	// Number of FLPs that computed data
	// Required: true
	NFlps *int64 `json:"nFlps"`

	// Number of subtimeframes
	// Required: true
	NSubtimeframes *int64 `json:"nSubtimeframes"`

	// Number of timeframes
	// Required: true
	NTimeframes *int64 `json:"nTimeframes"`

	// The run number.
	RunNumber int64 `json:"runNumber,omitempty"`

	// The quality of the run.
	// Required: true
	RunQuality *string `json:"runQuality"`

	// What kind of run.
	// Required: true
	RunType *string `json:"runType"`

	// time o2 end
	// Required: true
	// Format: date-time
	TimeO2End *strfmt.DateTime `json:"timeO2End"`

	// time o2 start
	// Required: true
	// Format: date-time
	TimeO2Start *strfmt.DateTime `json:"timeO2Start"`

	// time trg end
	// Required: true
	// Format: date-time
	TimeTrgEnd *strfmt.DateTime `json:"timeTrgEnd"`

	// time trg start
	// Required: true
	// Format: date-time
	TimeTrgStart *strfmt.DateTime `json:"timeTrgStart"`
}

// Validate validates this create run result dto
func (m *CreateRunResultDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesReadOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesTimeframeBuilder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNDetectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNEpns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNFlps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSubtimeframes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNTimeframes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeO2End(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeO2Start(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeTrgEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeTrgStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRunResultDto) validateActivityID(formats strfmt.Registry) error {

	if err := validate.Required("activityId", "body", m.ActivityID); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateBytesReadOut(formats strfmt.Registry) error {

	if err := validate.Required("bytesReadOut", "body", m.BytesReadOut); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateBytesTimeframeBuilder(formats strfmt.Registry) error {

	if err := validate.Required("bytesTimeframeBuilder", "body", m.BytesTimeframeBuilder); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateNDetectors(formats strfmt.Registry) error {

	if err := validate.Required("nDetectors", "body", m.NDetectors); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateNEpns(formats strfmt.Registry) error {

	if err := validate.Required("nEpns", "body", m.NEpns); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateNFlps(formats strfmt.Registry) error {

	if err := validate.Required("nFlps", "body", m.NFlps); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateNSubtimeframes(formats strfmt.Registry) error {

	if err := validate.Required("nSubtimeframes", "body", m.NSubtimeframes); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateNTimeframes(formats strfmt.Registry) error {

	if err := validate.Required("nTimeframes", "body", m.NTimeframes); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateRunQuality(formats strfmt.Registry) error {

	if err := validate.Required("runQuality", "body", m.RunQuality); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("runType", "body", m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateTimeO2End(formats strfmt.Registry) error {

	if err := validate.Required("timeO2End", "body", m.TimeO2End); err != nil {
		return err
	}

	if err := validate.FormatOf("timeO2End", "body", "date-time", m.TimeO2End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateTimeO2Start(formats strfmt.Registry) error {

	if err := validate.Required("timeO2Start", "body", m.TimeO2Start); err != nil {
		return err
	}

	if err := validate.FormatOf("timeO2Start", "body", "date-time", m.TimeO2Start.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateTimeTrgEnd(formats strfmt.Registry) error {

	if err := validate.Required("timeTrgEnd", "body", m.TimeTrgEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("timeTrgEnd", "body", "date-time", m.TimeTrgEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateRunResultDto) validateTimeTrgStart(formats strfmt.Registry) error {

	if err := validate.Required("timeTrgStart", "body", m.TimeTrgStart); err != nil {
		return err
	}

	if err := validate.FormatOf("timeTrgStart", "body", "date-time", m.TimeTrgStart.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateRunResultDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRunResultDto) UnmarshalBinary(b []byte) error {
	var res CreateRunResultDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
