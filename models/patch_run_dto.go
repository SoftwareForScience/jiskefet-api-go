// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchRunDto patch run dto
// swagger:model PatchRunDto
type PatchRunDto struct {

	// o2 end time
	// Required: true
	// Format: date-time
	O2EndTime *strfmt.DateTime `json:"O2EndTime"`

	// trg end time
	// Required: true
	// Format: date-time
	TrgEndTime *strfmt.DateTime `json:"TrgEndTime"`

	// Amount of bytes read out
	// Required: true
	BytesReadOut *int64 `json:"bytesReadOut"`

	// What builder was used.
	// Required: true
	BytesTimeframeBuilder *int64 `json:"bytesTimeframeBuilder"`

	// Number of subtimeframes
	// Required: true
	NSubtimeframes *int64 `json:"nSubtimeframes"`

	// Number of timeframes
	// Required: true
	NTimeframes *int64 `json:"nTimeframes"`

	// The quality of the run.
	// Required: true
	// Enum: [Good Bad Unknown]
	RunQuality *string `json:"runQuality"`
}

// Validate validates this patch run dto
func (m *PatchRunDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateO2EndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrgEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesReadOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytesTimeframeBuilder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSubtimeframes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNTimeframes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchRunDto) validateO2EndTime(formats strfmt.Registry) error {

	if err := validate.Required("O2EndTime", "body", m.O2EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("O2EndTime", "body", "date-time", m.O2EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PatchRunDto) validateTrgEndTime(formats strfmt.Registry) error {

	if err := validate.Required("TrgEndTime", "body", m.TrgEndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("TrgEndTime", "body", "date-time", m.TrgEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PatchRunDto) validateBytesReadOut(formats strfmt.Registry) error {

	if err := validate.Required("bytesReadOut", "body", m.BytesReadOut); err != nil {
		return err
	}

	return nil
}

func (m *PatchRunDto) validateBytesTimeframeBuilder(formats strfmt.Registry) error {

	if err := validate.Required("bytesTimeframeBuilder", "body", m.BytesTimeframeBuilder); err != nil {
		return err
	}

	return nil
}

func (m *PatchRunDto) validateNSubtimeframes(formats strfmt.Registry) error {

	if err := validate.Required("nSubtimeframes", "body", m.NSubtimeframes); err != nil {
		return err
	}

	return nil
}

func (m *PatchRunDto) validateNTimeframes(formats strfmt.Registry) error {

	if err := validate.Required("nTimeframes", "body", m.NTimeframes); err != nil {
		return err
	}

	return nil
}

var patchRunDtoTypeRunQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Good","Bad","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchRunDtoTypeRunQualityPropEnum = append(patchRunDtoTypeRunQualityPropEnum, v)
	}
}

const (

	// PatchRunDtoRunQualityGood captures enum value "Good"
	PatchRunDtoRunQualityGood string = "Good"

	// PatchRunDtoRunQualityBad captures enum value "Bad"
	PatchRunDtoRunQualityBad string = "Bad"

	// PatchRunDtoRunQualityUnknown captures enum value "Unknown"
	PatchRunDtoRunQualityUnknown string = "Unknown"
)

// prop value enum
func (m *PatchRunDto) validateRunQualityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patchRunDtoTypeRunQualityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PatchRunDto) validateRunQuality(formats strfmt.Registry) error {

	if err := validate.Required("runQuality", "body", m.RunQuality); err != nil {
		return err
	}

	// value enum
	if err := m.validateRunQualityEnum("runQuality", "body", *m.RunQuality); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchRunDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchRunDto) UnmarshalBinary(b []byte) error {
	var res PatchRunDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
