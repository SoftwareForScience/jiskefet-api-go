// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchFlpDto patch flp dto
// swagger:model PatchFlpDto
type PatchFlpDto struct {

	// data volume out from the readout 'equipment' component in bytes. Can reach PetaBytes.Updated regularly.
	// Required: true
	EquipmentBytes *int64 `json:"equipmentBytes"`

	// data volume out from the readout 'fmq' component in bytes. Can reach PetaBytes. Updated regularly.
	// Required: true
	FairMQBytes *int64 `json:"fairMQBytes"`

	// Number of subtimeframes processed in this FLP. Updated regularly.
	// Required: true
	NSubTimeframes *int64 `json:"nSubTimeframes"`

	// data volume out from the readout 'recording' component in bytes. Can reach PetaBytes. Updated regularly.
	// Required: true
	RecordingBytes *int64 `json:"recordingBytes"`
}

// Validate validates this patch flp dto
func (m *PatchFlpDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEquipmentBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFairMQBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNSubTimeframes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordingBytes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchFlpDto) validateEquipmentBytes(formats strfmt.Registry) error {

	if err := validate.Required("equipmentBytes", "body", m.EquipmentBytes); err != nil {
		return err
	}

	return nil
}

func (m *PatchFlpDto) validateFairMQBytes(formats strfmt.Registry) error {

	if err := validate.Required("fairMQBytes", "body", m.FairMQBytes); err != nil {
		return err
	}

	return nil
}

func (m *PatchFlpDto) validateNSubTimeframes(formats strfmt.Registry) error {

	if err := validate.Required("nSubTimeframes", "body", m.NSubTimeframes); err != nil {
		return err
	}

	return nil
}

func (m *PatchFlpDto) validateRecordingBytes(formats strfmt.Registry) error {

	if err := validate.Required("recordingBytes", "body", m.RecordingBytes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchFlpDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchFlpDto) UnmarshalBinary(b []byte) error {
	var res PatchFlpDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
