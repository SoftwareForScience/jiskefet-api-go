// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Run run
// swagger:model Run
type Run struct {

	// o2 end time
	// Format: date-time
	O2EndTime strfmt.DateTime `json:"O2EndTime,omitempty"`

	// o2 start time
	// Required: true
	// Format: date-time
	O2StartTime *strfmt.DateTime `json:"O2StartTime"`

	// trg end time
	// Format: date-time
	TrgEndTime strfmt.DateTime `json:"TrgEndTime,omitempty"`

	// trg start time
	// Required: true
	// Format: date-time
	TrgStartTime *strfmt.DateTime `json:"TrgStartTime"`

	// activity Id
	// Required: true
	ActivityID *string `json:"activityId"`

	// bytes read out
	BytesReadOut int64 `json:"bytesReadOut,omitempty"`

	// bytes timeframe builder
	BytesTimeframeBuilder int64 `json:"bytesTimeframeBuilder,omitempty"`

	// flp roles
	// Required: true
	FlpRoles []*FlpRole `json:"flpRoles"`

	// logs
	// Required: true
	Logs []int64 `json:"logs"`

	// n detectors
	// Required: true
	NDetectors *int64 `json:"nDetectors"`

	// n epns
	// Required: true
	NEpns *int64 `json:"nEpns"`

	// n flps
	// Required: true
	NFlps *int64 `json:"nFlps"`

	// n subtimeframes
	NSubtimeframes int64 `json:"nSubtimeframes,omitempty"`

	// n timeframes
	NTimeframes int64 `json:"nTimeframes,omitempty"`

	// run number
	// Required: true
	RunNumber *int64 `json:"runNumber"`

	// run quality
	RunQuality []string `json:"runQuality"`

	// run type
	// Required: true
	RunType []string `json:"runType"`

	// tags
	// Required: true
	Tags []*Tag `json:"tags"`
}

// Validate validates this run
func (m *Run) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateO2EndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO2StartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrgEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrgStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlpRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNDetectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNEpns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNFlps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Run) validateO2EndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.O2EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("O2EndTime", "body", "date-time", m.O2EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateO2StartTime(formats strfmt.Registry) error {

	if err := validate.Required("O2StartTime", "body", m.O2StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("O2StartTime", "body", "date-time", m.O2StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateTrgEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.TrgEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("TrgEndTime", "body", "date-time", m.TrgEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateTrgStartTime(formats strfmt.Registry) error {

	if err := validate.Required("TrgStartTime", "body", m.TrgStartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("TrgStartTime", "body", "date-time", m.TrgStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateActivityID(formats strfmt.Registry) error {

	if err := validate.Required("activityId", "body", m.ActivityID); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateFlpRoles(formats strfmt.Registry) error {

	if err := validate.Required("flpRoles", "body", m.FlpRoles); err != nil {
		return err
	}

	for i := 0; i < len(m.FlpRoles); i++ {
		if swag.IsZero(m.FlpRoles[i]) { // not required
			continue
		}

		if m.FlpRoles[i] != nil {
			if err := m.FlpRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flpRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Run) validateLogs(formats strfmt.Registry) error {

	if err := validate.Required("logs", "body", m.Logs); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateNDetectors(formats strfmt.Registry) error {

	if err := validate.Required("nDetectors", "body", m.NDetectors); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateNEpns(formats strfmt.Registry) error {

	if err := validate.Required("nEpns", "body", m.NEpns); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateNFlps(formats strfmt.Registry) error {

	if err := validate.Required("nFlps", "body", m.NFlps); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateRunNumber(formats strfmt.Registry) error {

	if err := validate.Required("runNumber", "body", m.RunNumber); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("runType", "body", m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *Run) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Run) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Run) UnmarshalBinary(b []byte) error {
	var res Run
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
