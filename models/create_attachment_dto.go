// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAttachmentDto create attachment dto
// swagger:model CreateAttachmentDto
type CreateAttachmentDto struct {

	// Content type header containing file mime
	// Required: true
	ContentType *string `json:"contentType"`

	// The base64 encoded file data.
	// Required: true
	FileData *string `json:"fileData"`

	// What kind of file is it?
	// Required: true
	FileMime *string `json:"fileMime"`

	// Name of the uploaded file.
	// Required: true
	FileName *string `json:"fileName"`

	// File size in bytes.
	// Required: true
	FileSize *int64 `json:"fileSize"`

	// The id of the corresponding Log
	// Required: true
	LogID *int64 `json:"logId"`

	// What is the name of the file?
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this create attachment dto
func (m *CreateAttachmentDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileMime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAttachmentDto) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *CreateAttachmentDto) validateFileData(formats strfmt.Registry) error {

	if err := validate.Required("fileData", "body", m.FileData); err != nil {
		return err
	}

	return nil
}

func (m *CreateAttachmentDto) validateFileMime(formats strfmt.Registry) error {

	if err := validate.Required("fileMime", "body", m.FileMime); err != nil {
		return err
	}

	return nil
}

func (m *CreateAttachmentDto) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("fileName", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *CreateAttachmentDto) validateFileSize(formats strfmt.Registry) error {

	if err := validate.Required("fileSize", "body", m.FileSize); err != nil {
		return err
	}

	return nil
}

func (m *CreateAttachmentDto) validateLogID(formats strfmt.Registry) error {

	if err := validate.Required("logId", "body", m.LogID); err != nil {
		return err
	}

	return nil
}

func (m *CreateAttachmentDto) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAttachmentDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAttachmentDto) UnmarshalBinary(b []byte) error {
	var res CreateAttachmentDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
